# HashMap JSDoc Examples Quality Scores
# Generated: 2025-01-06
# Scoring Criteria: Clarity (25%), Practical Relevance (25%), Technical Correctness (20%), Completeness (15%), API Demonstration (15%)
# Target: All examples scoring 8.0+ for professional-grade documentation

## Individual Example Scores (Function Name | Current Score | Status)

TypeId (Symbol)                | 5.5/10 | NEEDS IMPROVEMENT ⚠️
TypeId (Type)                  | 6.8/10 | NEEDS IMPROVEMENT ⚠️
HashMap Interface              | 9.2/10 | EXCELLENT ✅
HashMap Namespace              | 7.5/10 | NEEDS IMPROVEMENT ⚠️
UpdateFn                       | 8.8/10 | EXCELLENT ✅
Key Type Extractor             | 6.5/10 | NEEDS IMPROVEMENT ⚠️
Value Type Extractor           | 6.5/10 | NEEDS IMPROVEMENT ⚠️
Entry Type Extractor           | 6.5/10 | NEEDS IMPROVEMENT ⚠️
isHashMap                      | 8.5/10 | EXCELLENT ✅
empty                          | 8.0/10 | GOOD ✅
make                           | 8.8/10 | EXCELLENT ✅
fromIterable                   | 8.2/10 | EXCELLENT ✅
isEmpty                        | 8.5/10 | EXCELLENT ✅
get                            | 9.0/10 | EXCELLENT ✅
getHash                        | 6.8/10 | NEEDS IMPROVEMENT ⚠️
unsafeGet                      | 7.8/10 | NEEDS IMPROVEMENT ⚠️
has                            | 8.8/10 | EXCELLENT ✅
hasHash                        | 6.5/10 | NEEDS IMPROVEMENT ⚠️
hasBy                          | 8.0/10 | GOOD ✅
set                            | 9.2/10 | EXCELLENT ✅
keys                           | 8.0/10 | GOOD ✅
values                         | 8.0/10 | GOOD ✅
toValues                       | 7.8/10 | NEEDS IMPROVEMENT ⚠️
entries                        | 7.8/10 | NEEDS IMPROVEMENT ⚠️
toEntries                      | 7.8/10 | NEEDS IMPROVEMENT ⚠️
size                           | 8.2/10 | EXCELLENT ✅
beginMutation                  | 6.0/10 | NEEDS IMPROVEMENT ⚠️
endMutation                    | 6.0/10 | NEEDS IMPROVEMENT ⚠️
mutate                         | 8.0/10 | GOOD ✅
modifyAt                       | 8.8/10 | EXCELLENT ✅
modifyHash                     | 7.0/10 | NEEDS IMPROVEMENT ⚠️
modify                         | 8.5/10 | EXCELLENT ✅
union                          | 8.8/10 | EXCELLENT ✅
remove                         | 8.8/10 | EXCELLENT ✅
removeMany                     | 8.5/10 | EXCELLENT ✅
map                            | 8.8/10 | EXCELLENT ✅
flatMap                        | 8.2/10 | EXCELLENT ✅
forEach                        | 8.5/10 | EXCELLENT ✅
reduce                         | 8.8/10 | EXCELLENT ✅
filter                         | 8.8/10 | EXCELLENT ✅
compact                        | 8.5/10 | EXCELLENT ✅
filterMap                      | 8.8/10 | EXCELLENT ✅
findFirst                      | 8.2/10 | EXCELLENT ✅
some                           | 8.8/10 | EXCELLENT ✅
every                          | 8.8/10 | EXCELLENT ✅

## Summary Statistics
Total Examples: 45
Average Score: 8.0/10
Median Score: 8.2/10
Standard Deviation: 0.9

Examples by Category:
- EXCELLENT (8.5+): 20 examples (44%)
- GOOD (8.0-8.4): 8 examples (18%)
- NEEDS IMPROVEMENT (<8.0): 17 examples (38%)

## Target Achievement Status
Examples Above Target (8.0+): 28/45 (62%)
Examples Below Target (<8.0): 17/45 (38%)

## Priority Improvement Areas

### HIGH PRIORITY (Score < 7.0):
1. TypeId (Symbol) - 5.5/10
   - Issue: Uses `declare const` which is impractical
   - Needs: Real usage example or practical alternative

2. beginMutation - 6.0/10
   - Issue: Incomplete pattern, unclear benefits
   - Needs: Complete mutation workflow with performance context

3. endMutation - 6.0/10
   - Issue: Incomplete pattern, unclear benefits
   - Needs: Complete mutation workflow with performance context

4. Key Type Extractor - 6.5/10
   - Issue: Uses testing-specific `$ExpectType` syntax
   - Needs: Practical type extraction example

5. Value Type Extractor - 6.5/10
   - Issue: Uses testing-specific `$ExpectType` syntax
   - Needs: Practical type extraction example

6. Entry Type Extractor - 6.5/10
   - Issue: Uses testing-specific `$ExpectType` syntax
   - Needs: Practical type extraction example

7. hasHash - 6.5/10
   - Issue: Advanced use case with limited practical relevance
   - Needs: More realistic scenario or better context

8. TypeId (Type) - 6.8/10
   - Issue: Type guard pattern is correct but somewhat advanced
   - Needs: More practical context or simpler alternative

9. getHash - 6.8/10
   - Issue: Advanced use case with limited practical relevance
   - Needs: More realistic scenario or better context

### MEDIUM PRIORITY (Score 7.0-7.9):
10. modifyHash - 7.0/10
    - Issue: Advanced use case with complex example
    - Needs: Simpler or more practical demonstration

11. HashMap Namespace - 7.5/10
    - Issue: Advanced type-level programming
    - Needs: More practical usage context

12. toValues - 7.8/10
    - Issue: Basic example but could be more comprehensive
    - Needs: Enhanced with practical use case

13. entries - 7.8/10
    - Issue: Basic example but could be more comprehensive
    - Needs: Enhanced with practical use case

14. toEntries - 7.8/10
    - Issue: Basic example but could be more comprehensive
    - Needs: Enhanced with practical use case

15. unsafeGet - 7.8/10
    - Issue: Good warning but could be more comprehensive
    - Needs: Better explanation of when to use vs alternatives

## Strengths to Maintain
- Core operations (get, set, has, remove) have excellent examples
- Functional operations (map, filter, reduce) are well-demonstrated
- Immutability concepts are clearly shown
- Technical correctness is consistently high
- Most examples show practical, real-world usage

## Quality Improvement Strategy
1. **Phase 1**: Address all examples scoring below 7.0 (7 examples)
2. **Phase 2**: Enhance examples scoring 7.0-7.9 (10 examples)
3. **Phase 3**: Polish and ensure consistency across all examples
4. **Target**: All examples scoring 8.0+ for professional-grade documentation

## Notes
- Many examples already meet or exceed professional standards
- Type-level examples need the most attention (testing syntax issues)
- Mutation examples need better practical context
- Advanced features need more realistic scenarios
- Overall foundation is strong, improvements should focus on accessibility and practical relevance